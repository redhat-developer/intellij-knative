plugins {
    id 'idea'
    id 'java'
    id 'org.jetbrains.intellij' version '1.10.0'
}

group 'com.redhat.devtools.intellij'
version projectVersion

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://repository.jboss.org' }
}

def versionsMap = ['IU-2021.1':'211.6693.108', 'IU-2021.2':'212.4746.57', 'IU-2021.3':'213.5744.122', 'IU-2022.1':'221.5080.1', 'IU-2022.2':'222.3345.16', 'IU-2022.3':'223.7571.175']

intellij {
    version = ideaVersion
    pluginName = 'Knative by Red Hat'
    plugins = ['terminal', 'yaml', 'org.jetbrains.plugins.github', 'com.intellij.kubernetes:' + versionsMap[ideaVersion], 'com.redhat.devtools.intellij.telemetry:0.0.3.33', 'com.redhat.devtools.intellij.kubernetes:0.6.2.179']
    updateSinceUntilBuild = false
}

runIde {
    systemProperties['com.redhat.devtools.intellij.telemetry.mode'] = 'debug'
}

runIdeForUiTests {
    systemProperties['com.redhat.devtools.intellij.telemetry.mode'] = 'debug'
}

buildSearchableOptions {
    if (System.getProperty("idea.platform.prefix") == null) {
        systemProperties["idea.platform.prefix"] = ''
    }
}

dependencies {
    implementation 'io.fabric8:knative-client:5.12.4'
    implementation 'com.redhat.devtools.intellij:intellij-common:1.8.0'
    testImplementation 'org.mockito:mockito-inline:4.6.1'
    implementation 'com.squareup.okio:okio:3.1.0'
    // telemetry contributes annotations 13.0.0, so we need to declare newer version
    implementation 'org.jetbrains:annotations:23.0.0'
    testImplementation 'com.redhat.devtools.intellij:intellij-common:1.8.0:test'
}

configurations {
    runtimeClasspath {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    integrationTest {
        java.srcDir file('src/it/java')
        resources.srcDir file('src/it/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntimeClasspath
        runtimeClasspath += output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
}

runPluginVerifier {
    ideVersions = [ideaVersion]
}

publishPlugin {
    token    = jetBrainsToken
    channels = [jetBrainsChannel]
}
