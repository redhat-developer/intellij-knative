plugins {
    id 'idea'
    id 'java'
    id 'org.jetbrains.intellij' version '1.3.0'
}

group 'com.redhat.devtools.intellij'
version projectVersion

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'https://repository.jboss.org' }
}

def versionsMap = ['IU-2019.3':'193.5233.144', 'IU-2019.3.1':'193.5662.31', 'IU-2020.1':'201.6668.99', 'IU-2020.1.1':'201.7223.18', 'IU-2020.2':'202.6397.93', 'IU-2020.2.1':'202.6948.69', 'IU-2020.3':'203.5981.152', 'IU-2020.3.1':'203.6682.164', 'IU-2021.1':'211.6693.108', 'IU-2021.2':'212.4746.57', 'IU-2021.3':'213.5744.122']

intellij {
    version = ideaVersion
    pluginName = 'Knative by Red Hat'
    plugins = ['terminal', 'yaml', 'com.intellij.kubernetes:' + versionsMap[ideaVersion], 'com.redhat.devtools.intellij.telemetry:0.0.2.18', 'com.redhat.devtools.intellij.kubernetes:0.3.0.83']
    updateSinceUntilBuild = false
}

runIde {
    systemProperties['com.redhat.devtools.intellij.telemetry.mode'] = 'debug'
}

runIdeForUiTests {
    systemProperties['com.redhat.devtools.intellij.telemetry.mode'] = 'debug'
}

dependencies {
    compile 'io.fabric8:knative-client:5.7.4'
    compile 'com.redhat.devtools.intellij:intellij-common:1.6.0'
    testCompile 'org.mockito:mockito-inline:3.8.0'
    compile 'com.squareup.okio:okio:1.15.0'
    // telemetry contributes annotations 13.0.0, so we need to declare newer version
    compile 'org.jetbrains:annotations:16.0.1'
    testCompile 'com.redhat.devtools.intellij:intellij-common:1.5.0:test'
}

configurations {
    compile {
        exclude group: 'org.slf4j', module: 'slf4j-api'
    }
    integrationTestImplementation.extendsFrom testImplementation
    integrationTestRuntimeOnly.extendsFrom testRuntimeOnly
}

sourceSets {
    integrationTest {
        java.srcDir file('src/it/java')
        resources.srcDir file('src/it/resources')
        compileClasspath += sourceSets.main.output + configurations.testRuntime
        runtimeClasspath += output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    group = 'verification'
    testClassesDirs = sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    outputs.upToDateWhen { false }
    mustRunAfter test
}

runPluginVerifier {
    ideVersions = [ideaVersion]
}

publishPlugin {
    token    = jetBrainsToken
    channels = [jetBrainsChannel]
}
